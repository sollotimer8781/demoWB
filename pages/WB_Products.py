import json
from typing import List

import pandas as pd
import streamlit as st
from sqlalchemy.exc import SQLAlchemyError

from app_layout import initialize_page
from demowb.db import init_db
from sync_wb import load_wb_products_df, sync_wb
from wb_client import get_token_from_secrets

initialize_page(
    page_title="Wildberries Products",
    page_icon="üü£",
    current_page="pages/WB_Products.py",
    description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Wildberries API",
)

with st.sidebar:
    st.header("Wildberries API")
    token = get_token_from_secrets()
    if token:
        st.success("WB_API_TOKEN –Ω–∞–π–¥–µ–Ω –≤ secrets")
    else:
        st.warning("WB_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

# Controls
col1, col2, col3 = st.columns([1, 1, 2])
with col1:
    do_sync = st.button("Sync now", type="primary", use_container_width=True)
with col2:
    refresh = st.button("Refresh", use_container_width=True)

if do_sync:
    if not token:
        st.error("WB_API_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ secrets. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
    else:
        with st.spinner("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Wildberries..."):
            try:
                inserted, updated = sync_wb()
                # clear cache to show fresh data
                load_wb_products_df.clear()
                st.success(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ: {inserted}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

if refresh:
    load_wb_products_df.clear()

# Data loading (cached)
try:
    df = load_wb_products_df()
except SQLAlchemyError as exc:  # noqa: BLE001
    df = None
    load_wb_products_df.clear()
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Wildberries: {exc}")
    if st.button("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î", type="primary"):
        try:
            init_db()
            st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'Refresh'.")
        except Exception as init_exc:  # noqa: BLE001
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {init_exc}")
    st.stop()
except Exception as exc:  # noqa: BLE001
    df = None
    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö Wildberries: {exc}")
    st.stop()

if df is None or df.empty:
    if not token:
        st.info(
            "–ù–µ –Ω–∞–π–¥–µ–Ω WB_API_TOKEN. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤ .streamlit/secrets.toml:\n\n"
            "[secrets]\nWB_API_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–∏–∑_WB'\n\n"
            "–õ–∏–±–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è STREAMLIT_SECRETS —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º JSON.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ 'Sync now' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WB.")
    st.stop()

# Filters
with st.expander("–§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫", expanded=True):
    q = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–±—Ä–µ–Ω–¥—É/ID", value="")
    brands: List[str] = sorted([b for b in df["brand"].dropna().unique().tolist() if isinstance(b, str)])
    selected_brands = st.multiselect("–ë—Ä–µ–Ω–¥—ã", options=brands, default=[])
    min_stock = st.number_input("–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫", min_value=0, value=0, step=1)

fdf = df.copy()
if q:
    q_low = q.strip().lower()
    fdf = fdf[
        fdf.apply(
            lambda r: (
                (str(r.get("title", "")).lower().find(q_low) != -1)
                or (str(r.get("brand", "")).lower().find(q_low) != -1)
                or (q_low.isdigit() and str(r.get("nm_id", "")) == q_low)
            ),
            axis=1,
        )
    ]
if selected_brands:
    fdf = fdf[fdf["brand"].isin(selected_brands)]
if min_stock:
    fdf = fdf[(fdf["stock"].fillna(0) >= min_stock)]

# Display table
if not fdf.empty:
    # Prepare first image column
    def first_img(lst):
        try:
            if isinstance(lst, list) and lst:
                return lst[0]
        except Exception:
            pass
        return None

    fdf = fdf.copy()
    fdf["image"] = fdf["image_urls"].apply(first_img)

    # Show interactive table
    try:
        st.dataframe(
            fdf[["nm_id", "title", "brand", "price", "stock", "image"]],
            use_container_width=True,
            column_config={
                "image": st.column_config.ImageColumn("Image", help="–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", width="small"),
            },
            hide_index=True,
        )
    except Exception:
        # Fallback without image column type
        st.dataframe(
            fdf[["nm_id", "title", "brand", "price", "stock", "image"]],
            use_container_width=True,
            hide_index=True,
        )

    # Optional: detailed view with images and extra JSON
    with st.expander("–î–µ—Ç–∞–ª–∏ –∏ JSON (extra)"):
        max_rows = st.number_input("Max rows to preview", min_value=1, max_value=min(1000, len(fdf)), value=min(50, len(fdf)))
        subset = fdf.head(int(max_rows))
        for _, row in subset.iterrows():
            with st.expander(f"{row.get('nm_id')} ‚Äî {row.get('title')}"):
                imgs = row.get("image_urls") or []
                if imgs:
                    st.image(imgs, width=120)
                st.json(row.get("extra", {}))
else:
    st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
