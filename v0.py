import io
import pandas as pd
import streamlit as st

st.set_page_config(page_title="Merge Excel —Ñ–∞–π–ª–æ–≤", layout="wide")
st.title("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –ø–æ–ª—é")
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 2 –∏–ª–∏ 3 Excel —Ñ–∞–π–ª–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ –í–°–ï–• —Ñ–∞–π–ª–∞—Ö.")

# ---------- Sidebar ----------
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è")
    sheet_name = st.text_input("–ò–º—è –ª–∏—Å—Ç–∞ (–ø—É—Å—Ç–æ = –ø–µ—Ä–≤—ã–π)", value="")
    header_row = st.number_input("–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (0-–∏–Ω–¥–µ–∫—Å)", min_value=0, value=0, step=1)
    normalize_key = st.checkbox("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª—é—á (trim/lower/–±–µ–∑ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö)", value=True)
    output_name = st.text_input("–ò–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ Excel", value="merged_output.xlsx")
    
    st.divider()
    st.subheader("–¢–∏–ø –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
    join_type = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
        options=["inner", "outer"],
        index=0,
        help="inner = —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–ª—é—á–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö (–±–µ–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫)\nouter = –≤—Å–µ –∫–ª—é—á–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)"
    )

def read_xlsx(file, sheet_name=None, header_row=0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ Excel —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if file is None:
        return None
    try:
        if sheet_name and str(sheet_name).strip():
            return pd.read_excel(file, sheet_name=str(sheet_name).strip(), header=header_row)
        return pd.read_excel(file, header=header_row)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {getattr(file, 'name', '—Ñ–∞–π–ª–∞')}: {e}")
        return None

def normalize_series_key(s: pd.Series) -> pd.Series:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞: trim, lower, —É–±—Ä–∞—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã"""
    return (s.astype(str)
            .str.replace("\u00A0", "", regex=False)
            .str.strip()
            .str.lower())

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ----------
st.subheader("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã (–º–∏–Ω–∏–º—É–º 2)")
col1, col2, col3 = st.columns(3)
with col1:
    f1 = st.file_uploader("Excel —Ñ–∞–π–ª #1", type=["xlsx", "xls"], key="file1")
with col2:
    f2 = st.file_uploader("Excel —Ñ–∞–π–ª #2", type=["xlsx", "xls"], key="file2")
with col3:
    f3 = st.file_uploader("Excel —Ñ–∞–π–ª #3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", type=["xlsx", "xls"], key="file3")

# ---------- –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ----------
df1 = read_xlsx(f1, sheet_name, header_row)
df2 = read_xlsx(f2, sheet_name, header_row)
df3 = read_xlsx(f3, sheet_name, header_row)

# ---------- –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ----------
loaded_dfs = []
loaded_names = []
all_dfs = [df1, df2, df3]
all_names = ["–§–∞–π–ª_1", "–§–∞–π–ª_2", "–§–∞–π–ª_3"]

for df, name in zip(all_dfs, all_names):
    if df is not None:
        loaded_dfs.append(df)
        loaded_names.append(name)

# ---------- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é ----------
if loaded_dfs:
    st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(loaded_dfs)}")
    preview_tabs = st.tabs(loaded_names)
    for tab, df, name in zip(preview_tabs, loaded_dfs, loaded_names):
        with tab:
            st.write(f"**{name}**: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            st.dataframe(df.head(50), use_container_width=True)

# ---------- –ü–†–û–í–ï–†–ö–ê: –º–∏–Ω–∏–º—É–º 2 —Ñ–∞–π–ª–∞ ----------
if len(loaded_dfs) < 2:
    st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
else:
    # ---------- –†–∞–±–æ—Ç–∞–µ–º —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ ----------
    st.divider()
    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_dfs)} —Ñ–∞–π–ª–æ–≤. –ì–æ—Ç–æ–≤–æ –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é!")

    # ---------- –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–ª—é—á–∞ ----------
    st.subheader("–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É-–∫–ª—é—á –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ.")

    result_key_name = st.text_input("–ò–º—è –∫–ª—é—á–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ", value="–ö–ª—é—á")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º selectbox –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    key_cols = []
    key_select_cols = st.columns(len(loaded_dfs))
    for idx, (col, df, name) in enumerate(zip(key_select_cols, loaded_dfs, loaded_names)):
        with col:
            key = st.selectbox(f"–ö–ª—é—á –≤ {name}", options=list(df.columns), index=0, key=f"key_{idx}")
            key_cols.append(key)

    st.divider()

    # ---------- –®–∞–≥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è ----------
    st.subheader("–®–∞–≥ 3: –í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ (–∫—Ä–æ–º–µ –∫–ª—é—á–∞). –û–Ω–∏ –ø–æ–ª—É—á–∞—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã [1]/[2]/[3].")

    add_cols = []
    field_tabs = st.tabs([f"–ü–æ–ª—è {name}" for name in loaded_names])
    
    for idx, (tab, df, name, key_col) in enumerate(zip(field_tabs, loaded_dfs, loaded_names, key_cols)):
        with tab:
            available_cols = [c for c in df.columns if c != key_col]
            selected = st.multiselect(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –∏–∑ {name}",
                options=available_cols,
                default=[],
                key=f"fields_{idx}"
            )
            add_cols.append(selected)

    st.divider()

    # ---------- –§—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è ----------
    def build_merged_result(dfs_list, key_cols_list, add_cols_list, names_list, result_key_name, join_type, do_normalize):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç 2 –∏–ª–∏ 3 DataFrame –ø–æ –∫–ª—é—á—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è –ø–æ–ª–µ–π"""
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ DataFrame
        prepared_dfs = []
        for idx, (df, key_col, extra_cols, name) in enumerate(zip(dfs_list, key_cols_list, add_cols_list, names_list)):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
            if key_col not in df.columns:
                raise ValueError(f"–í {name} –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{key_col}'")
            
            # –í—ã–±–æ—Ä –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            cols = [key_col] + extra_cols
            temp_df = df[cols].copy()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞
            if do_normalize:
                temp_df[key_col] = normalize_series_key(temp_df[key_col])
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
            temp_df = temp_df.rename(columns={key_col: result_key_name})
            
            # –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –Ω–µ-–∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
            prefix = f"[{idx+1}] "
            temp_df = temp_df.rename(columns={
                col: f"{prefix}{col}" 
                for col in temp_df.columns 
                if col != result_key_name
            })
            
            prepared_dfs.append(temp_df)
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        result = prepared_dfs[0]
        for next_df in prepared_dfs[1:]:
            result = pd.merge(result, next_df, on=result_key_name, how=join_type)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ inner, –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–µ –±—É–¥–µ—Ç
        # –ï—Å–ª–∏ outer - —É–¥–∞–ª–∏–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –í–°–ï –Ω–µ-–∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
        if join_type == "outer":
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫–∏ –∫—Ä–æ–º–µ –∫–ª—é—á–∞
            non_key_cols = [c for c in result.columns if c != result_key_name]
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∫–ª—é—á–∞) NaN
            result = result.dropna(subset=non_key_cols, how='all')
        
        return result

    # ---------- –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤—ã–≥—Ä—É–∑–∫–∞ ----------
    st.subheader("–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

    if st.button("üöÄ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å Excel", use_container_width=True, type="primary"):
        try:
            with st.spinner("–û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                result = build_merged_result(
                    dfs_list=loaded_dfs,
                    key_cols_list=key_cols,
                    add_cols_list=add_cols,
                    names_list=loaded_names,
                    result_key_name=result_key_name,
                    join_type=join_type,
                    do_normalize=normalize_key
                )
            
            st.success(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫ (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã)")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º
            if join_type == "inner":
                st.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è INNER JOIN: –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø–∞–ª–∏ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.")
            
            # –ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with st.expander("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫)"):
                st.dataframe(result.head(100), use_container_width=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Excel
            with st.spinner("–§–æ—Ä–º–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª..."):
                bio = io.BytesIO()
                with pd.ExcelWriter(bio, engine="xlsxwriter") as writer:
                    # –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
                    for df, name in zip(loaded_dfs, loaded_names):
                        df.to_excel(writer, sheet_name=name, index=False)
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç
                    result.to_excel(writer, sheet_name="Merge", index=False)
                    
                    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                    for sheet_name, worksheet in writer.sheets.items():
                        if sheet_name == "Merge":
                            max_col = result.shape[1]
                        else:
                            idx = loaded_names.index(sheet_name)
                            max_col = loaded_dfs[idx].shape[1]
                        worksheet.set_column(0, max(0, max_col - 1), 18)
                
                bio.seek(0)
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                data=bio,
                file_name=output_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
            st.exception(e)