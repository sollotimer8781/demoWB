from __future__ import annotations

import os
from pathlib import Path
from typing import Dict, Optional

import streamlit as st
from sqlalchemy import func, select
from sqlalchemy.engine import make_url
from sqlalchemy.exc import SQLAlchemyError

from app_layout import APP_PAGES, initialize_page
from demowb.db import SessionLocal, get_database_url
from demowb.ui import inject_css
from models import Product, ProductImportLog

CSS_PATH = Path(__file__).resolve().parent / "demowb" / "styles.css"

initialize_page(
    page_title="–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    page_icon="üõçÔ∏è",
    current_page="streamlit_app.py",
    show_title=False,
    description="–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Streamlit –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.",
    inject_theme=False,
)

css_applied = inject_css(CSS_PATH)
if not css_applied:
    st.warning("–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ —Ç–µ–º—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")

st.markdown(
    """
    ### üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
    –∏–ª–∏ —Ä–∞–±–æ—á–µ–º—É –º–µ—Å—Ç—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤. –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–±—Ä–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.
    """
)


def _load_catalog_metrics() -> Optional[Dict[str, int]]:
    try:
        with SessionLocal() as session:
            total_products = session.scalar(select(func.count(Product.id))) or 0
            import_logs = session.scalar(select(func.count(ProductImportLog.id))) or 0
        return {"products": total_products, "imports": import_logs}
    except SQLAlchemyError as exc:  # pragma: no cover - runtime safeguard
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞: {exc}")
        return None


def _resolve_setting(key: str) -> Optional[str]:
    try:
        secret_value = st.secrets.get(key)  # type: ignore[attr-defined]
    except Exception:
        secret_value = None
    if secret_value:
        return str(secret_value)
    env_value = os.getenv(key)
    if env_value:
        return env_value
    return None


def _format_database_label(url: str) -> str:
    try:
        url_obj = make_url(url)
    except Exception:  # pragma: no cover - unparsable URLs fall back to raw value
        return url
    backend = url_obj.get_backend_name()
    if backend == "sqlite":
        database = url_obj.database or ":memory:"
        name = database if database == ":memory:" else Path(database).name
        return f"SQLite ({name})"
    host = url_obj.host or "localhost"
    port = f":{url_obj.port}" if url_obj.port else ""
    db_name = url_obj.database or ""
    return f"{backend}://{host}{port}/{db_name}".rstrip("/")


metrics = _load_catalog_metrics()
if metrics:
    col_products, col_imports = st.columns(2)
    col_products.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ", f"{metrics['products']:,}".replace(",", " " ))
    col_imports.metric("–ò–º–ø–æ—Ä—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤", f"{metrics['imports']:,}".replace(",", " " ))

st.divider()

st.subheader("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")

database_url = get_database_url()
database_label = _format_database_label(database_url)
if database_url.startswith("sqlite"):
    st.info(
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è SQLite-–±–∞–∑–∞ `db.sqlite3`. –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å PostgreSQL –∏–ª–∏ –¥—Ä—É–≥—É—é –°–£–ë–î," 
        " —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `DATABASE_URL` –≤ `.env` –∏–ª–∏ `.streamlit/secrets.toml`."
    )
else:
    st.success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: `{database_label}`")

settings = {
    "DATABASE_URL": bool(_resolve_setting("DATABASE_URL")),
    "OZON_CLIENT_ID": bool(_resolve_setting("OZON_CLIENT_ID")),
    "OZON_API_KEY": bool(_resolve_setting("OZON_API_KEY")),
    "WB_API_TOKEN": bool(_resolve_setting("WB_API_TOKEN")),
}

missing_settings = [key for key, configured in settings.items() if not configured and key != "DATABASE_URL"]
if missing_settings:
    st.warning(
        "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: " + ", ".join(missing_settings) +
        ". –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ `.streamlit/secrets.toml` –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    )
else:
    st.success("API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")

with st.expander("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å .env –∏ —Å–µ–∫—Ä–µ—Ç—ã", expanded=bool(missing_settings)):
    st.markdown(
        """
        1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã: `cp .streamlit/secrets.toml.example .streamlit/secrets.toml`.
        2. –£–∫–∞–∂–∏—Ç–µ `DATABASE_URL`, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω—è—è –ë–î (PostgreSQL, MySQL –∏ —Ç.–¥.).
        3. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ `OZON_CLIENT_ID`, `OZON_API_KEY`, `WB_API_TOKEN` –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.
        4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Streamlit –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
    )
    st.code(
        """# .env
DATABASE_URL=postgresql+psycopg2://user:password@host:5432/marketplace
""",
        language="toml",
    )
    st.code(
        """# .streamlit/secrets.toml
DATABASE_URL = "postgresql+psycopg2://user:password@host:5432/marketplace"
OZON_CLIENT_ID = "your_client_id"
OZON_API_KEY = "your_api_key"
WB_API_TOKEN = "your_wb_api_token"
""",
        language="toml",
    )

st.divider()

st.subheader("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
st.markdown("–í—ã–ø–æ–ª–Ω–∏—Ç–µ smoke-—Ç–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
st.code("streamlit run streamlit_app.py", language="bash")

st.markdown("""–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:""")
links_cols = st.columns(3)
for idx, page in enumerate(APP_PAGES[1:]):
    col = links_cols[idx % 3]
    with col:
        st.page_link(page["path"], label=page["label"], icon=page.get("icon"))

st.caption("–ï—Å–ª–∏ –≤—ã —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–±–ª–∞–∫–µ (Streamlit Cloud, Render, Railway), —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ" " –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å–µ–∫—Ä–µ—Ç—ã –∑–∞–¥–∞–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.")
