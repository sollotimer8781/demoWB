import streamlit as st
import pandas as pd
import sqlite3
import io
import os

DB_PATH = "catalog.db"

# ======================
# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
# ======================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("""
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        price REAL,
        code TEXT,
        country TEXT,
        description TEXT,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    conn.close()

def add_product(values):
    conn = sqlite3.connect(DB_PATH)
    keys = ','.join(values.keys())
    qmarks = ','.join('?' * len(values))
    conn.execute(f"INSERT INTO products ({keys}) VALUES ({qmarks})", tuple(values.values()))
    conn.commit()
    conn.close()

def update_product(product_id, values):
    conn = sqlite3.connect(DB_PATH)
    sets = ','.join([f"{k}=?" for k in values.keys()])
    conn.execute(f"UPDATE products SET {sets}, updated_at=CURRENT_TIMESTAMP WHERE id=?", (*values.values(), product_id))
    conn.commit()
    conn.close()

def load_all_products():
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT * FROM products", conn)
    conn.close()
    return df

def delete_product(product_id):
    conn = sqlite3.connect(DB_PATH)
    conn.execute("DELETE FROM products WHERE id=?", (product_id,))
    conn.commit()
    conn.close()

init_db()

# ======================
tab1, tab2 = st.tabs(["–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", "–ö–∞—Ç–∞–ª–æ–≥"])

# ======================
# --- TAB1: –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï --
# ======================
with tab1:
    with st.sidebar:
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è")
        sheet_name = st.text_input("–ò–º—è –ª–∏—Å—Ç–∞ (–ø—É—Å—Ç–æ = –ø–µ—Ä–≤—ã–π)", value="")
        header_row = st.number_input("–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (0-–∏–Ω–¥–µ–∫—Å)", min_value=0, value=0, step=1)
        normalize_key = st.checkbox("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª—é—á (trim/lower/–±–µ–∑ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö)", value=True)
        output_name = st.text_input("–ò–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ Excel", value="merged_output.xlsx")
        st.divider()
        st.subheader("–¢–∏–ø –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        join_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", options=["inner", "outer"], index=0,
                             help="inner = —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–ª—é—á–∏, outer = –≤—Å–µ –∫–ª—é—á–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–µ –ø–æ–ª—è)")

    def read_xlsx(file, sheet_name=None, header_row=0):
        if file is None:
            return None
        try:
            if sheet_name and str(sheet_name).strip():
                return pd.read_excel(file, sheet_name=str(sheet_name).strip(), header=header_row)
            return pd.read_excel(file, header=header_row)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {getattr(file, 'name', '—Ñ–∞–π–ª–∞')}: {e}")
            return None

    def normalize_series_key(s: pd.Series) -> pd.Series:
        return (s.astype(str)
                  .str.replace("\u00A0", "", regex=False)
                  .str.strip()
                  .str.lower())

    st.subheader("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã (–º–∏–Ω–∏–º—É–º 2)")
    col1, col2, col3 = st.columns(3)
    with col1:
        f1 = st.file_uploader("Excel —Ñ–∞–π–ª #1", type=["xlsx", "xls"], key="file1")
    with col2:
        f2 = st.file_uploader("Excel —Ñ–∞–π–ª #2", type=["xlsx", "xls"], key="file2")
    with col3:
        f3 = st.file_uploader("Excel —Ñ–∞–π–ª #3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", type=["xlsx", "xls"], key="file3")

    df1 = read_xlsx(f1, sheet_name, header_row)
    df2 = read_xlsx(f2, sheet_name, header_row)
    df3 = read_xlsx(f3, sheet_name, header_row)

    loaded_dfs, loaded_names = [], []
    all_dfs = [df1, df2, df3]
    all_names = ["–§–∞–π–ª_1", "–§–∞–π–ª_2", "–§–∞–π–ª_3"]
    for df, name in zip(all_dfs, all_names):
        if df is not None:
            loaded_dfs.append(df)
            loaded_names.append(name)

    if loaded_dfs:
        st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(loaded_dfs)}")
        preview_tabs = st.tabs(loaded_names)
        for tab, df, name in zip(preview_tabs, loaded_dfs, loaded_names):
            with tab:
                st.write(f"{name}: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
                st.dataframe(df.head(50), use_container_width=True)

    if len(loaded_dfs) < 2:
        st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
    else:
        st.divider()
        st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_dfs)} —Ñ–∞–π–ª–æ–≤. –ì–æ—Ç–æ–≤–æ –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é!")

        st.subheader("–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è")
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É-–∫–ª—é—á –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ.")
        result_key_name = st.text_input("–ò–º—è –∫–ª—é—á–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ", value="–ö–ª—é—á")
        key_cols = []
        key_select_cols = st.columns(len(loaded_dfs))
        for idx, (col, df, name) in enumerate(zip(key_select_cols, loaded_dfs, loaded_names)):
            with col:
                key = st.selectbox(f"–ö–ª—é—á –≤ {name}", options=list(df.columns), index=0, key=f"key_{idx}")
                key_cols.append(key)
        st.divider()

        st.subheader("–®–∞–≥ 3: –í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ (–∫—Ä–æ–º–µ –∫–ª—é—á–∞). –û–Ω–∏ –ø–æ–ª—É—á–∞—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã [1]/[2]/[3].")
        add_cols = []
        field_tabs = st.tabs([f"–ü–æ–ª—è {name}" for name in loaded_names])
        for idx, (tab, df, name, key_col) in enumerate(zip(field_tabs, loaded_dfs, loaded_names, key_cols)):
            with tab:
                available_cols = [c for c in df.columns if c != key_col]
                selected = st.multiselect(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –∏–∑ {name}", options=available_cols, default=[], key=f"fields_{idx}")
                add_cols.append(selected)
        st.divider()

        def build_merged_result(dfs_list, key_cols_list, add_cols_list, names_list, result_key_name, join_type, do_normalize):
            prepared_dfs = []
            for idx, (df, key_col, extra_cols, name) in enumerate(zip(dfs_list, key_cols_list, add_cols_list, names_list)):
                cols = [key_col] + extra_cols
                temp_df = df[cols].copy()
                if do_normalize:
                    temp_df[key_col] = normalize_series_key(temp_df[key_col])
                temp_df = temp_df.rename(columns={key_col: result_key_name})
                prefix = f"[{idx+1}] "
                temp_df = temp_df.rename(columns={col: f"{prefix}{col}" for col in temp_df.columns if col != result_key_name})
                prepared_dfs.append(temp_df)
            result = prepared_dfs[0]
            for next_df in prepared_dfs[1:]:
                result = pd.merge(result, next_df, on=result_key_name, how=join_type)
            if join_type == "outer":
                non_key_cols = [c for c in result.columns if c != result_key_name]
                result = result.dropna(subset=non_key_cols, how='all')
            return result

        st.subheader("–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        if st.button("üöÄ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å Excel", use_container_width=True):
            try:
                with st.spinner("–û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                    result = build_merged_result(
                        dfs_list=loaded_dfs,
                        key_cols_list=key_cols,
                        add_cols_list=add_cols,
                        names_list=loaded_names,
                        result_key_name=result_key_name,
                        join_type=join_type,
                        do_normalize=normalize_key
                    )
                st.success(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫ (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã)")
                with st.expander("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫)"):
                    st.dataframe(result.head(100), use_container_width=True)
                bio = io.BytesIO()
                with pd.ExcelWriter(bio, engine="xlsxwriter") as writer:
                    for df, name in zip(loaded_dfs, loaded_names):
                        df.to_excel(writer, sheet_name=name, index=False)
                    result.to_excel(writer, sheet_name="Merge", index=False)
                    for sheet_name, worksheet in writer.sheets.items():
                        ws_df = result if sheet_name == "Merge" else loaded_dfs[loaded_names.index(sheet_name)]
                        worksheet.set_column(0, max(0, ws_df.shape[1] - 1), 18)
                bio.seek(0)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                    data=bio,
                    file_name=output_name,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
                st.session_state["last_merged_result"] = result

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
                st.exception(e)

# ======================
# --- TAB2: –ö–ê–¢–ê–õ–û–ì/B–î ---
# ======================
with tab2:
    st.title("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–∞–∑–∞ SQLite)")
    df = load_all_products()

    st.subheader("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
    st.dataframe(df, use_container_width=True)

    with st.form("add_form"):
        st.write("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ")
        price = st.number_input("–¶–µ–Ω–∞", step=0.01)
        code = st.text_input("–ö–æ–¥")
        country = st.text_input("–°—Ç—Ä–∞–Ω–∞")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
        if submitted:
            add_product({"name": name, "price": price, "code": code, "country": country, "description": description})
            st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
            st.experimental_rerun()

    st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    select_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", df['id'].tolist() if len(df) else [])
    if select_id:
        row = df[df['id'] == select_id].iloc[0]
        with st.form("edit_form"):
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=row['name'])
            price = st.number_input("–¶–µ–Ω–∞", value=row['price'], step=0.01)
            code = st.text_input("–ö–æ–¥", value=row['code'])
            country = st.text_input("–°—Ç—Ä–∞–Ω–∞", value=row['country'])
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=row['description'])
            saved = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            if saved:
                update_product(select_id, {"name": name, "price": price, "code": code, "country": country, "description": description})
                st.success("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")
                st.experimental_rerun()
            delete = st.form_submit_button("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
            if delete:
                delete_product(select_id)
                st.success("–£–¥–∞–ª–µ–Ω–æ!")
                st.experimental_rerun()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ tab1 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ –≤ –±–∞–∑—É
    if "last_merged_result" in st.session_state and st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ (SQLite)"):
        result_df = st.session_state["last_merged_result"]
        for _, row in result_df.iterrows():
            add_product({
                "name": str(row.get("–ê—Ä—Ç–∏–∫—É–ª", row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""))),
                "price": float(row.get("–¶–µ–Ω–∞", 0)) if "–¶–µ–Ω–∞" in row else None,
                "code": str(row.get("–ö–æ–¥", "")),
                "country": str(row.get("–°—Ç—Ä–∞–Ω–∞", "")),
                "description": str(row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")),
            })
        st.success(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(result_df)} —Å—Ç—Ä–æ–∫!")
        st.experimental_rerun()
